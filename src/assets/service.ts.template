import { Injectable } from '@nestjs/common';
import { Request } from 'express';
import { Result } from '{{levelPath}}/dto/Result';
import { JsonBody } from '{{levelPath}}/dto/JsonBody';
import { Connection } from 'typeorm';
import { {{modelName}} } from '{{levelPath}}/entities/{{modelPath}}';
import { filterEntity, sortEntity, filterEqualsEntity, plainToEntity } from '{{levelPath}}/utils/FilterAndSort';

@Injectable()
export class {{serviceName}} {
    constructor(private connection: Connection) {}
    
    async findAll(json: JsonBody, user = '999999', req: Request): Promise<[{{modelName}}[], number]> {
        const rep = this.connection.getRepository({{modelName}});
        const filter = json.filter;
        {{#each master}}
        filter['{{out}}'] = json.master['{{in}}'];
        {{/each}}
        
        return rep.findAndCount({
            where: {
                ...filterEqualsEntity(rep.metadata, filter),
                ...filterEntity(rep.metadata, json.filter.jl_filter)
            },
            order: sortEntity(rep.metadata, json.filter.jl_sort),
            take: parseInt(json.filter.jn_fetch || 2000, 10),
            skip: parseInt(json.filter.jn_offset || 0, 10),
        });
    }
    async add(json: JsonBody, user = '999999', req: Request): Promise<Result> {
        const result = new Result();
        const rep = this.connection.getRepository({{modelName}});
        {{#each master}}
        json.data['{{out}}'] = json.master['{{in}}'];
        {{/each}}
        const data: {{modelName}} = plainToEntity(rep.metadata, json.data) as {{modelName}};
        data.ck_user = user;
        const result = await rep.save(data);
        
        return result.setId(result['{{idproperty}}'],'{{idproperty}}');
    }

    async update(json: JsonBody, user = '999999', req: Request): Promise<Result> {
        const result = new Result();
        const rep = this.connection.getRepository({{modelName}});
        {{#each master}}
        json.data['{{out}}'] = json.master['{{in}}'];
        {{/each}}
        const data: {{modelName}} = plainToEntity(rep.metadata, json.data) as {{modelName}};
        data.ck_user = user;
        await rep.findOneOrFail(data['{{idproperty}}']);
        const res = await rep.save(data);
        return result.setId(res['{{idproperty}}'],'{{idproperty}}');
    }

    async delete(json: JsonBody, user = '999999', req: Request): Promise<Result> {
        const result = new Result();
        await this.connection.getRepository({{modelName}}).delete(json.data['{{idproperty}}']);
        
        return result.setId(json.data['{{idproperty}}'],'{{idproperty}}');
    }
}
